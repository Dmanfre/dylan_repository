knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#Loading in the data from 22-23 season
wbb_rosters_22_23 <- read_csv("data/wbb_rosters_2022_23.csv")
head(wbb_rosters_22_23)
#state counts
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
filter(state_clean == "MD") %>%
count()
##Maryland has 350
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n))
#1073 NAs
wbb_rosters_22_23 %>%
filter(is.na(state_clean))
wbb_rosters_22_23 %>%
group_by(conference) %>%
count() %>%
arrange(desc(n))
#What I want to do here is make a value that says power_five and have that be equal to "Big Ten", "Big 12", "ACC", "SEC', "Pac-12" so that when I filter I can say Filter to show me only players in the power_five conferences. I want to do this instead of having to filter and write a logner and/or statment
#This code was created organically and not by chatgpt
wbb_rosters_22_23 %>%
filter(conference == power_five)
power_five <- c("SEC", "Big Ten", "Pac-12", "Big 12", "ACC")
#state counts
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
filter(state_clean == "MD") %>%
count()
##Maryland has 350
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n))
#1073 NAs
wbb_rosters_22_23 %>%
filter(is.na(state_clean))
wbb_rosters_22_23 %>%
group_by(conference) %>%
count() %>%
arrange(desc(n))
#What I want to do here is make a value that says power_five and have that be equal to "Big Ten", "Big 12", "ACC", "SEC', "Pac-12" so that when I filter I can say Filter to show me only players in the power_five conferences. I want to do this instead of having to filter and write a logner and/or statment
power_five <- c("SEC", "Big Ten", "Pac-12", "Big 12", "ACC")
#This code was created organically and not by chatgpt
wbb_rosters_22_23 %>%
filter(conference == power_five)
#Question: should I include the new incoming Big Ten teams into this code block?
#Why does this not show everyone in p5 from maryland? Many people missing? What I want to happen is show players who are in p5 and from Maryland as a home state.
#how many players in P5 are from Maryland
from_maryland %>%
filter(conference %in% power_five) %>%
group_by(conference) %>%
count()
View(wbb_rosters_22_23)
wbb_rosters_22_23 %>%
filter(conference == power_five) %>%
filter(state_state_clean == "MD")
wbb_rosters_22_23 %>%
filter(conference == power_five) %>%
filter(state_clean == "MD")
#how many players in P5 are from Maryland
from_maryland %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD") %>%
count()
#how many players in P5 are from Maryland
wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD") %>%
count()
#how many players in P5 are from Maryland
wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD")
#how many players in P5 are from Maryland
from_maryland <-  wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD")
View(from_maryland)
from_maryland <-  wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD") %>%
group_by(hometown) %>%
count()
from_maryland <-  wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD")
from_maryland %>%
group_by(hometown_clean) %>%
count()
from_maryland %>%
group_by(conference) %>%
count()
from_maryland %>%
group_by(hometown_clean) %>%
count()
# 8 players are in the ACC and Big Ten
from_maryland %>%
group_by(conference) %>%
count()
from_maryland_p5 <-  wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD")
wbb_rosters_22_23 %>%
filter(state_clean == "MD") %>%
group_by(divison)
wbb_rosters_22_23 %>%
filter(state_clean == "MD") %>%
group_by(division)
wbb_rosters_22_23 %>%
filter(state_clean == "MD") %>%
group_by(division) %>%
count(n)
wbb_rosters_22_23 %>%
filter(state_clean == "MD") %>%
group_by(division) %>%
count() %>%
arrange(desc(n))
divison_breakdown <- wbb_rosters_22_23 %>%
filter(state_clean == "MD") %>%
group_by(division) %>%
count() %>%
arrange(desc(n))
wbb_rosters_22_23 %>%
#filter(state_clean == "MD") %>%
group_by(division) %>%
count() %>%
arrange(desc(n))
from_maryland_p5 %>%
group_by(conference) %>%
count()
View(from_maryland_p5)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
library(tidyverse)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#Loading in the data from 22-23 season
wbb_rosters_22_23 <- read_csv("data/wbb_rosters_2022_23.csv")
head(wbb_rosters_22_23)
#state counts
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
filter(state_clean == "MD") %>%
count()
##Maryland has 350
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n))
#1073 NAs
wbb_rosters_22_23 %>%
filter(is.na(state_clean))
wbb_rosters_22_23 %>%
group_by(conference) %>%
count() %>%
arrange(desc(n))
#What I want to do here is make a value that says power_five and have that be equal to "Big Ten", "Big 12", "ACC", "SEC', "Pac-12" so that when I filter I can say Filter to show me only players in the power_five conferences. I want to do this instead of having to filter and write a logner and/or statment
power_five <- c("SEC", "Big Ten", "Pac-12", "Big 12", "ACC")
wbb_rosters_22_23 %>%
filter(conference == power_five)
#Question: should I include the new incoming Big Ten teams into this code block?
#Why does this not show everyone in p5 from maryland? Many people missing? What I want to happen is show players who are in p5 and from Maryland as a home state.
#how many players in P5 are from Maryland?
#The %in% works with filtering on the list.
from_maryland_p5 <-  wbb_rosters_22_23 %>%
filter(conference %in% power_five) %>%
filter (state_clean == "MD")
#compare to other states per capita...
from_maryland_p5 %>%
group_by(hometown_clean) %>%
count()
#Is the story here that Maryland, a big ten state, doesn't produce players to Power 5?
# 8 players are in the ACC and Big Ten
from_maryland_p5 %>%
group_by(conference) %>%
count()
# One is in the pac-12. UCLA is the school and they are moving to the Big Ten.
#Showing a breakdown of the divisions?
divison_breakdown <- wbb_rosters_22_23 %>%
filter(state_clean == "MD") %>%
group_by(division) %>%
count() %>%
arrange(desc(n))
# Maryland produces more D3 players than D1... D1 is more because it includes all conferences and not limited to P5 schools.... in genearl there are more D3 players because it's less competitive and no athletic scholarships.
correlations <- read_csv("https://raw.githubusercontent.com/dwillis/NCAAWomensSoccerData/main/data/ncaa_womens_soccer_matchstats_2023.csv")
View(correlations)
newcorrelations <- correlations %>%
mutate( differential = goals - defensive_goals)
View(newcorrelations)
newcorrelations <- correlations %>%
mutate( differential = goals - defensive_goals)
newcorrelations %>%
summarise(correlation = cor(differential, fouls, method="pearson"))
#Working with Yellow Cards
newcorrelations %>%
summarise(correlation = cor(differential, yellow_cards, method="pearson"))
newcorrelations %>%
summarise(correlation = cor(differential, yellow_cards, method="pearson"))
fit <- lm(differential ~ fouls, data = newcorrelations)
View(fit)
fit <- lm(differential ~ fouls, data = newcorrelations)
summary(fit)
newcorrelations %>%
summarise(correlation = cor(differential, so_g, method="pearson"))
net <- lm(differential ~ so_g, data = newcorrelations)
net <- lm(differential ~ so_g, data = newcorrelations)
net <- lm(differential ~ so_g, data = newcorrelations)
View(net)
net <- lm(differential ~ so_g, data = newcorrelations)
summary(net)
(0.445467*11)+-2.530441
net <- lm(differential ~ so_g, data = newcorrelations)
summary(net)
#Working with an example that works
#only cahnged fouls for so_g
newcorrelations %>%
summarise(correlation = cor(differential, so_g, method="pearson"))
correlations %>%
summarise(correlation = cor(assissts, outcome, method="pearson"))
correlations %>%
summarise(correlation = cor(assists, outcome, method="pearson"))
correlations %>%
summarise(correlation = cor(assists, outcome, method="pearson"))
correlations %>%
summarise(correlation = cor(saves, ga , method="pearson"))
saves_ga <- lm(saves ~ so_g, data = correlations)
summary(saves_ga)
summary(saves_ga)
correlations %>%
summarise(correlation = cor(saves, ga , method="pearson"))
libraru(tidyverse)
library(tidyverse)
install.packages("cfbfastR")
library(cfbfastR)
Sys.setenv(CFBD_API_KEY = "YG3BnH+G9FNPRxeI+k6t6BjTktLrqqQITj90Rkuw1f6Dt9rL54jczqxjg8rGA3Sj")
usethis::edit_r_environ()
#load libraries
library(tidyverse)
library(cfbfastR)
cfbd_pbp_data(
year,
season_type = "regular",
week = 1,
team = NULL,
play_type = NULL,
epa_wpa = FALSE,
...
)
cfbd_pbp_data(
year = 2022
season_type = "regular",
cfbd_pbp_data(
year = `2022`
season_type = "regular",
cfbd_pbp_data(
year = 2022,
season_type = "regular",
week = 1,
team = "Maryland",
play_type = NULL,
epa_wpa = FALSE,
...
)
cfbd_pbp_data(
year = 2022,
season_type = "regular",
week = 1,
team = "Maryland",
play_type = NULL,
epa_wpa = FALSE,
...
)
plays_2023 <- cfbd_pbp_data(2023)
View(plays_2023)
plays_2023 %>%
filter(drive+number == 1, play_number == 1)
plays_2023 %>%
filter(drive_number == 1, play_number == 1)
plays_2023 %>%
filter(drive_number == 1, play_number == 1, play_type != "KLickoff") %>%
distinct(home)
plays_2023 %>%
filter(drive_number == 1, play_number == 1, play_type != "KLickoff") %>%
distinct(home, play_type)
library(tidyverse)
#loading data
logs <- read_csv("data/cbblogs1523.csv")
#loading data
logs <- read_csv("https://dwillis.github.io/sports-data-files/cbblogs1523.csv")
View(logs)
logs <- logs %>%
mutate( Differential = TeamScore - OpponentScore,
NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,
TurnoverMargin = TeamTurnovers - OpponentTurnovers)
logs <- logs %>%
mutate( Differential = TeamScore - OpponentScore,
NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,
TurnoverMargin = TeamTurnovers - OpponentTurnovers)
rebounds <- lm(Differential ~ NetRebounds, data=logs)
View(rebounds)
rebounds <- lm(Differential ~ NetRebounds, data=logs)
summary(rebounds)
rebounds_turnovers <- lm(Differential ~ NetRebounds + TurnoverMargin, data=logs)
summary(rebounds_turnovers)
rebounds_turnovers <- lm(Differential ~ NetRebounds + TurnoverMargin + TeamTotalRebounds, data=logs)
summary(rebounds_turnovers)
rebounds_turnovers <- lm(Differential ~ NetRebounds + TurnoverMargin, data=logs)
summary(rebounds_turnovers)
install.packages("Hmisc")
library(Hmisc)
simplelogs <- logs %>%
select_if(is.numeric) %>%
select(-Game) %>%
select(Differential, NetRebounds, TurnoverMargin, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)
summary(simplelogs)
View(simplelogs)
cormatrix <- rcorr(as.matrix(simplelogs))
cormatrix$r
model2 <- lm(Differential ~ NetRebounds + TurnoverMargin + TeamFGPCT + OpponentFGPCT, data=logs)
summary(model2)
logs |>
filter(Team == "Michigan" & Season == '2020-2021' | Team == "Wisconsin" & Season == '2019-2020' | Team == "Michigan State" & Season == '2018-2019' | Team == "Michigan State" & Season == '2017-2018' | Team == 'Illinois' & Season == '2021-2022' | Team == 'Purdue' & Season == '2022-2023') |>
summarise(
meanNetRebounds = mean(NetRebounds),
meanTurnoverMargin = mean(TurnoverMargin),
meanTeamFGPCT = mean(TeamFGPCT),
meanOpponentFGPCT = mean(OpponentFGPCT)
)
# (netrebounds estimate * meanNetRebounds) + (turnover margin estimate * meanTurnoverMargin) + (TeamFGPCT estimate * meanTeamFGPCT) + (OpponentFGPCT estimate * meanOpponentFGPCT) + Intercept
(0.654800*6.05) + (-1.310579*0.6333333) + (90.805990*0.4543167) + (-91.351310*0.4107167) + 0.287665
logs |>
filter(
Team == "Maryland" & Season == '2022-2023'
) |>
summarise(
meanNetRebounds = mean(NetRebounds),
meanTurnoverMargin = mean(TurnoverMargin),
meanTeamFGPCT = mean(TeamFGPCT),
meanOpponentFGPCT = mean(OpponentFGPCT)
)
(0.654800*1.685714) + (-1.310579*0.9142857) + (90.805990*0.4517714) + (-91.351310*0.428) + 0.287665
logs |>
filter(
Team == "Maryland" & Season == '2022-2023'
) |> summarise(avg_score = mean(TeamScore), avg_opp = mean(OpponentScore))
knitr::opts_chunk$set(echo = TRUE)
wbb_rosters_22_23 %>%
group_by(state_clean) %>%
filter(state_clean == "MD") %>%
count()
from_maryland_p5 %>%
group_by(hometown_clean) %>%
count()
from_maryland_p5 %>%
group_by(conference) %>%
count()
# 8 players are in the ACC and Big Ten
conference_md <-from_maryland_p5 %>%
group_by(conference) %>%
count()
from_maryland_p5 %>%
group_by(hometown_clean) %>%
count()
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
ACS_2021 <- load_variables(2021, "acs5")
#libraries
library(tidyverse)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
# is using acs 5'
#when writing this make it say that these numbers are based on five-year rolling averages...
#Reference tables
#Load ACS crosswalk
ACS_2021 <- load_variables(2021, "acs5")
ACS_2018 <- load_variables(2018, "acs5")
ACS_2013 <- load_variables(2018, "acs5")
ACS_2010 <- load_variables(2010, "acs5")
ACS_2009 <- load_variables(2009, "acs5")
ACS_2008 <- load_variables(2008, "acs3")
ACS_2007 <- load_variables(2007, "acs3")
#md_cities <- get_acs(geography = "place",
#variables = c(medi_house_income = "B19013_001"),
#state = "MD")
#2018
md_2018 <- get_acs(geography = "state",
variables = c(medi_house_income = "B19013_001",
population = "B01003_001",
medi_home_value = "B25077_001",
housing_total = "B25002_001",
housing_occupied = "B25002_002",
housing_vacancies = "B25002_003",
labor_total = "B23025_003",
labor_employed = "B23025_004",
labor_unemployed = "B23025_005",
education_total = "B15003_001",
education_hs = "B15003_017",
education_bachelors = "B15003_022",
public_assistance_total = "B22003_001",
public_assistance_received = "B22003_002",
public_assistance_not_received = "B22003_005",
poverty_total = "B17020_001",
poverty_below = "B17020_002",
poverty_above = "B17020_010",
rent = "B25064_001",
real_estate_tax_median = "B25103_001",
real_estate_tax_aggregate = "B25090_001"),
state = "MD",
year = 2018) %>%
mutate(year = 2018)
View(md_2018)
#2021 ACS
ACS_2021 <- load_variables(2021, "acs5")
View(ACS_2021)
md_2018 <- get_acs(geography = "state",
variables = c(medi_house_income = "B19013_001",
population = "B01003_001"),
state = "MD",
year = 2018) %>%
mutate(year = 2018)
View(md_2018)
md_2018 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
state = "MD",
year = 2021) %>%
mutate(year = 2021)
#Get this to show the population data of all the Maryland towns
md_2021 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
state = "MD",
year = 2021) %>%
mutate(year = 2021)
rm(list = "net", "md_2018", "plays_2023", "ACS_2007", "ACS_2008", "ACS_2009", "ACS_2010", "ACS_2013", "ACS_2018")
rm(list = "saves_ga")
logs <-  read_csv("https://dwillis.github.io/sports-data-files/footballlogs1122.csv")
View(logs)
logs <- logs %>%
mutate(differential = TeamScore - OpponentScore )
logs <- logs %>%
lm(differential ~ Penalties, data=logs)
summary(logs)
logs %>%
lm(differential ~ Penalties, data=logs)
model1 <-  logs %>%
lm(differential ~ Penalties, data=logs)
model1 <-  logs %>%
lm(differential ~ Penalties, data=logs)
model1 <- lm(differential ~ Penalties, data=logs)
model1 <- lm(differential ~ Penalties, data=logs)
summary(model1)
model2 <- lm(differential ~ Penalties + Fumbles, data=logs)
summary(model2)
model2 <- lm(differential ~ Penalties + FirstDownPen, data=logs)
summary(model2)
model2 <- lm(differential ~ Penalties + Interceptions, data=logs)
summary(model2)
model2 <- lm(differential ~ Fumbles + Interceptions, data=logs)
summary(model2)
model2 <- lm(differential ~ TotalTurnovers + Interceptions, data=logs)
summary(model2)
model2 <- lm(differential ~ Fumbles + Interceptions, data=logs)
summary(model2)
model2 <- lm(differential ~ Fumbles + Interceptions, data=logs)
summary(model2)
model2 <- lm(differential ~ FirstDownPen + Interceptions, data=logs)
summary(model2)
model2 <- lm(differential ~ FirstDownPen + Interceptions + Fumbles, data=logs)
summary(model2)
model2 <- lm(differential ~ + Penalties + FirstDownPen + Interceptions + Fumbles, data=logs)
summary(model2)
library(Hmisc)
