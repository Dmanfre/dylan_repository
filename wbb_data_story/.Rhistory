write_csv(md_p5_hometown, "data/md_p5_hometown.csv")
write_csv(md_2021, "data/md_2021.csv")
View(total_p5_players)
View(from_maryland_p5)
View(p5_players)
View(state_counts)
View(md_2021)
View(usa_2021)
View(p5_players)
View(state_counts)
View(usa_2021)
View(md_p5_hometown)
View(md_division_breakdown)
View(md_2021)
View(international_players)
View(division_one_md)
View(international_players)
View(all_md_players_hometown)
View(md_p5_hometown)
View(total_p5_players)
View(wbb_rosters_22_23)
View(state_counts)
View(from_maryland_p5)
View(p5_players)
View(conf_player_counts)
View(division_one_md)
Sys.setenv(CFBD_API_KEY = "YG3BnH+G9FNPRxeI+k6t6BjTktLrqqQITj90Rkuw1f6Dt9rL54jczqxjg8rGA3Sj")
#working with PBP data
plays_2023 <- cfbd_pbp_data(2023)
#load libraries
library(tidyverse)
library(cfbfastR)
library(Hmisc)
#working with PBP data
plays_2023 <- cfbd_pbp_data(2023)
plays_2023 %>%
filter(drive_number == 1, play_number == 1, play_type != "KLickoff") %>%
distinct(home, play_type)
#Many use kickoff as the first play while others to not.
logs <-  read_csv("https://dwillis.github.io/sports-data-files/footballlogs1122.csv")
#Create a new column for point differential between the TeamScore and OpponentScore using mutate. You can use the same `logs` variable.
logs <- logs %>%
mutate(differential = TeamScore - OpponentScore )
#Create a regression (a linear model, like we did in this chapter Links to an external site.) investigating whether the number of penalties can predict the score differential.
model1 <- lm(differential ~ Penalties, data=logs)
summary(model1)
# I kept getting an error saying invalid langugae so I used ChatGPT to tell me that what I was doing wrong was originally writing the code like this model1 <- logs %>% lm(differential ~ Penalties, data=logs) summary(model1)... the error was that I did not need the first logs. I only needed to set the data equal to logs.
#In a paragraph below this code block, describe the results: what is the p-value, and does it mean the results are random? Using the r-squared value, how much of the differential can be explained by penalty yards? How useful is this regression?
#The p-value is 0.0158 or 2%. This is low but not as low as we have seen before in other examples. The R-Squared value is close to 0 which means there is not much of a correlation to this data. The regression is not successful because there is a very high Risidual Standard of Error in the 20s. I think you go off the R value when you say that less than 1% of the value can be explained by the penalty yards.
model2 <- lm(differential ~ DefYards + OffenseAvg + OffensiveYards, data=logs)
summary(model2)
## Struggled a bit with this question. Is this a question where we would create a martrix?
#The code I went with tries to balance out things from both sides of the ball. I'm sure there is a combination that produces a lower standard error score which would make a stronger relationship but getting it to a 12 down from 22 is good in my book. It also produced a high R-squared closer to 1 which means that there is something correlated about these figures in determining the point differental of a game.
logs %>%
group_by(differential) %>%
count() %>%
arrange(desc(differential))
#Going to define a close game as anything under 7 points. So I should create a filter to only show me the games with a score differential of 7 or less.
less_seven <- logs %>%
filter(differential < 7) %>%
arrange(desc(differential))
#setting up new model
model3 <- lm(formula = differential ~ DefYards + OffenseAvg + OffensiveYards,
data = less_seven)
summary(model3)
#This gave me a very low residual standard of error score but a lower R-squared score as well. What this tells me is that maybe the factors I chose work well in games with a higher differential than those with a lower one. I also think that there is more of a situational relationship here that theres a stronger correlation wtih higher point differentials rather than in close games. Would this mean that penalties don't always influence the point differentials of close games?
View(logs)
logs <- logs %>%
mutate(differential = abs(TeamScore - OpponentScore))
less_seven <- logs %>%
filter(differential < 7) %>%
arrange(desc(differential))
View(less_seven)
#loading libraries
library(tidyverse)
library(Hmisc)
#loading data
logs <- read_csv("https://dwillis.github.io/sports-data-files/cbblogs1523.csv")
ÃŸ
#build a model to see if we can determine score differential between two teams
logs <- logs %>%
mutate( Differential = TeamScore - OpponentScore,
NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,
TurnoverMargin = TeamTurnovers - OpponentTurnovers)
logs <- logs %>%
mutate( Differential = TeamScore - OpponentScore,
NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,
TurnoverMargin = TeamTurnovers - OpponentTurnovers)
View(logs)
logs |>
filter(
Team == "Maryland" & Season == '2022-2023'
) |> summarise(avg_score = mean(TeamScore), avg_opp = mean(OpponentScore))
residualmodel <- logs |> mutate(differential = TeamScore - OpponentScore, FGPctMargin = TeamFGPCT - OpponentFGPCT)
fit <- lm(differential ~ FGPctMargin, data = residualmodel)
summary(fit)
residualmodel <-  residualmodel %>% na.omit()
residualmodel <-  residualmodel %>% na.omit()
View(residualmodel)
residualmodel <-  residualmodel %>% na.omit()
View(residualmodel)
residualmodel <- residualmodel |> mutate(predicted = predict(fit), residuals = residuals(fit))
residualmodel <- residualmodel |> filter(!is.na(FGPctMargin))
residualmodel <- residualmodel |> filter(!is.na(FGPctMargin))
residualmodel <- residualmodel |> mutate(predicted = predict(fit), residuals = residuals(fit))
residualmodel <- residualmodel %>% na.omit()
residualmodel <- residualmodel |> mutate(predicted = predict(fit), residuals = residuals(fit))
rm(list="model1", "model2", "model3", "logs", "residualmodel", "less_seven")
rm(list="model1", "model2", "model3", "logs", "residualmodel", "less_seven", "fit")
rm(list="model1", "model2", "model3", "logs", "residualmodel", "less_seven", "fit", "plays_2023")
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
rm(list="county_code")
rm(list="county_code", "geography", "md_perc", "state_code")
View(division_one_md)
View(conf_player_counts)
View(division_one_md)
View(md_p5_hometown)
View(division_one_md)
View(md_2021)
View(usa_2021)
View(md_2021)
View(division_one_md)
View(wbb_rosters_22_23)
data(fips_codes)
View(fips_codes)
View(fips_codes)
data(fips_codes) %>%
group_by(state)
View(usa_2021)
View(md_2021)
View(wbb_rosters_22_23)
View(md_2021)
View(usa_2021)
fips_codes <- data(fips_codes)
data(fips_codes)
View(ACS_2021)
View(md_2021)
View(usa_2021)
View(wbb_rosters_22_23)
View(usa_2021)
View(md_2021)
View(usa_2021)
View(wbb_rosters_22_23)
View(usa_2021)
fips_codes_to_USA <- usa_2021 |> left_join(fips_codes)
data(fips_codes)
View(wbb_rosters_22_23)
View(usa_2021)
usa_2022 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs1",
year = 2022) %>%
mutate(year = 2022) %>%
rename(state = NMAE)
#API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
usa_2022 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs1",
year = 2022) %>%
mutate(year = 2022) %>%
rename(state = NMAE)
View(usa_2021)
usa_2022 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs1",
year = 2022) %>%
mutate(year = 2022) %>%
rename(NAME = state)
View(usa_2021)
usa_2022 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs1",
year = 2022) %>%
mutate(year = 2022)
usa_2022 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs1",
year = 2022) %>%
mutate(year = 2022) %>%
rename(state = NAME)
View(usa_2022)
View(usa_2021)
View(usa_2022)
usa_2021 <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs5",
year = 2021) %>%
mutate(year = 2021) %>%
rename(state = NAME)
usa_2022 |> left_join(fips_codes, join_by("state"))
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
usa_2022 |> left_join(fips_codes, join_by("state"))
usa_2022 |> left_join(fips_codes, join_by("state"))
usa_2022 |> left_join(fips_codes, join_by("state"))
usa_2022 |> left_join(fips_codes, usa_2022 join_by("state"))
usa_2022 |> left_join(fips_codes, usa_2022, join_by("state"))
View(usa_2022)
usa_2022 |> inner_join(fips_codes, usa_2022, join_by("state"))
joined_states <- inner_join(usa_2022, fips_codes, by = "state")
View(joined_states)
joined_states <- left_join(usa_2022, fips_codes, by = "state")
View(joined_states)
View(state_counts)
View(joined_states)
joined_states <- inner_join(usa_2022, fips_codes, by = "state")
merged_df <- merge(usa_2022, fips_codes, by = "state")
View(merged_df)
rm(list="merged_df")
#second attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("states" = "state"))
#second attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("state" = "state"))
#second attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("state_name" = "state"))
#second attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("states" = "state"))
#second attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("states" = "state"))
#Third attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("state" = "state"))
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n)
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("state"))
joined_states <- usa_2022 %>%
inner_join(fips_codes, by = c("state"))
data(state_name)
data(fips_codes)
#second attempt
joined_states <- usa_2022 %>%
inner_join(fips_codes, fips_codes, by = c("state"))
joined_states <- usa_2022 %>%
inner_join(usa_2022, fips_codes, by = c("state"))
#second attempt
joined_states <- usa_2022 %>%
left_join(fips_codes, by = c("state"))
data(state)
View(state.x77)
data(fips_codes)
View(state.center)
usa_2022 %>%
mutate(state.abb = state.abb)
usa_2022 %>%
mutate(state_name = state.abb)
rm(list="state.x77", "state.division", "state.region", "state.area")
state_abbreviations <- data.frame(
statenames = state.name,
state_abbrev = state.abb)
View(state_abbreviations)
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("statenames" = "statenames"))
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames"))
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state_clean = state.abb)
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state.abb = state_clean)
usa_2022 <- usa_2022 %>%
left_join(state_counts, by = c("state.abb" = "state.abb"))
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state.abbrev = state_clean)
usa_2022 <- usa_2022 %>%
left_join(state_counts, by = c("state.abbrev" = "state.abbrev"))
usa_2022 <- usa_2022 %>%
inner_join(state_counts, by = c("state.abbrev" = "state.abbrev"))
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames"))
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames")) %>%
select(-state_abbrev.y)
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(n) %>%
rename(players = n) %>%
rename(state.abbrev = state_clean)
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(state.abbrev) %>%
rename(players = n) %>%
rename(state.abbrev = state_clean)
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state.abbrev = state_clean)
usa_2022 <- usa_2022 %>%
inner_join((state_counts, usa_2022, by = c("state.abbrev" = "state.abbrev")))
usa_2022 <- usa_2022 %>%
inner_join(state_counts, usa_2022, by = c("state.abbrev" = "state.abbrev"))
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames"))
state_abbreviations <- data.frame(
statenames = state.name,
state_abbrev = state.abb
usa_2022 <- usa_2022 %>%
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames")) %>%
select(-state_abbrev.x.x, -state_abbrev.y)
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames")) %>%
select(-state_abbrev.x)
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames")) %>%
select(-state_abbrev.x)
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames")) %>%
usa_2022 <- usa_2022 %>%
select(-state_abbrev.x.x)
usa_2022 <- usa_2022 %>%
select(-state_abbrev.x.x)
usa_2022 <- usa_2022 %>%
left_join(state_abbreviations, by = c("state" = "statenames"))
usa_2022 <- usa_2022 %>%
select(-state_abbrev.y)
usa_2022_with_state_counts <- usa_2022 %>%
left_join(state_counts, join_by(state.abbrev = state.abbrev))
usa_2022_with_state_counts <- usa_2022 |>
left_join(state_counts, join_by(state.abbrev == state.abbrev))
usa_2022_with_state_counts <- usa_2022 |>
left_join(state_counts, usa_2022 by= "state.abbrev")
usa_2022_with_state_counts <- usa_2022 %>%
left_join(state_counts, usa_2022 by = "state.abbrev")
usa_2022_with_state_counts <-  left_join(state_counts, usa_2022 by = "state.abbrev")
usa_2022_with_state_counts <- left_join(state_counts, usa_2022, by = "state.abbrev")
usa_2022_with_state_counts <- usa_2022 %>%
left_join(state_counts, usa_2022, by = "state.abbrev")
state_counts <- wbb_rosters_22_23 %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state_abbrev = state_clean)
usa_2022_with_state_counts <- usa_2022 %>%
left_join(state_counts, usa_2022, by = "state_abbrev")
View(usa_2022_with_state_counts)
usa_2022_with_state_counts <- usa_2022 %>%
left_join(state_counts, usa_2022, by = "state_abbrev")
usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100,000)
usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100000)
View(international_players)
usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100000) %>%
arrange(desc(per_capita))
View(division_one_md)
usa_2022
mutate(state.abbrev = case_when(
state.abbrev == "DC" ~ NA,
state.abbrev == "PR" ~ NA,
.default = state.abbrev
))
usa_2022
mutate(state = case_when(
state == "District of Columbia" ~ "DC",
state == "Puerto Rico" ~ "PR",
.default = state.abbrev
))
usa_2022 %>%
mutate(state = case_when(
state == "District of Columbia" ~ "DC",
state == "Puerto Rico" ~ "PR",
.default = state
))
usa_2022 <- usa_2022 %>%
mutate(state_abbrev = case_when(
state == "District of Columbia" ~ "DC",
state == "Puerto Rico" ~ "PR",
.default = state_abbrev
))
usa_2022 <- usa_2022 %>%
mutate(state_abbrev = case_when(
state == "District of Columbia" ~ "DC",
state == "Puerto Rico" ~ "PR",
TRUE ~ state_abbrev
))
usa_2022_with_state_counts <- usa_2022 %>%
left_join(state_counts, usa_2022, by = "state_abbrev")
usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100000) %>%
arrange(desc(per_capita))
usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100000) %>%
arrange(desc(per_capita))
usa_2022_with_state_counts <- usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100000) %>%
arrange(desc(per_capita))
division_one_usa <- wbb_rosters_22_23 %>%
filter(division == "I")
View(division_one_usa)
division_one_usa %>%
group_by(state_clean)
division_one_usa %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state_abbrev = state_clean)
division_one_usa <- division_one_usa %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state_abbrev = state_clean)
division_one_usa <- division_one_usa %>%
mutate(state_abbrev = case_when(
state == "District of Columbia" ~ "DC",
state == "Puerto Rico" ~ "PR",
TRUE ~ state_abbrev
))
D1_usa_2022_with_state_counts <- usa_2022 %>%
left_join(division_one_usa, usa_2022, by = "state_abbrev")
View(D1_usa_2022_with_state_counts)
division_one_state_counts <- division_one_usa %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state_abbrev = state_clean)
division_one_usa <- wbb_rosters_22_23 %>%
filter(division == "I")
#getting d1_state_counts
division_one_usa <- division_one_usa %>%
group_by(state_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players = n) %>%
rename(state_abbrev = state_clean)
#joining
D1_usa_2022_with_state_counts <- usa_2022 %>%
left_join(division_one_usa, usa_2022, by = "state_abbrev")
D1_usa_2022_with_state_counts <- D1_usa_2022_with_state_counts %>%
mutate(per_capita = (players/estimate)*100000) %>%
arrange(desc(per_capita))
wbb_rosters_23_24 <-  read_csv("data/wbb_rosters_23_24.csv")
wbb_rosters_23_24 <-  read_csv("data/wbb_rosters_2023_24.csv")
head(wbb_rosters_23_24)
summary(wbb_rosters_23_24)
view(wbb_rosters_23_24)
View(wbb_rosters_22_23)
View(division_one_md)
View(all_md_players_hometown)
division_one_md <- wbb_rosters_22_23 %>%
filter(division == "I", state_clean == "MD")
View(division_one_usa)
View(division_one_md)
division_one_md %>%
group_by(hometown_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players_from_md = n)
division_one_md %>%
group_by(hometown_clean) %>%
count() %>%
arrange(desc(n)) %>%
rename(players_from_md = n)
View(from_maryland_p5)
View(division_one_md)
View(from_maryland_p5)
View(wbb_rosters_23_24)
View(wbb_rosters_22_23)
View(conf_player_counts)
knitr::opts_chunk$set(echo = TRUE)
onlybigten <- from_maryland_p5 %>%
filter(conference == "Big Ten")
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
onlybigten <- from_maryland_p5 %>%
filter(conference == "Big Ten")
View(onlybigten)
